{"ast":null,"code":"import warning from 'tiny-warning';\nvar semiWithNl = /;\\n/;\n/**\n * Naive CSS parser.\n * - Supports only rule body (no selectors)\n * - Requires semicolon and new line after the value (except of last line)\n * - No nested rules support\n */\n\nvar parse = function (cssText) {\n  var style = {};\n  var split = cssText.split(semiWithNl);\n\n  for (var i = 0; i < split.length; i++) {\n    var decl = (split[i] || '').trim();\n    if (!decl) continue;\n    var colonIndex = decl.indexOf(':');\n\n    if (colonIndex === -1) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, \"[JSS] Malformed CSS string \\\"\" + decl + \"\\\"\") : void 0;\n      continue;\n    }\n\n    var prop = decl.substr(0, colonIndex).trim();\n    var value = decl.substr(colonIndex + 1).trim();\n    style[prop] = value;\n  }\n\n  return style;\n};\n\nvar onProcessRule = function onProcessRule(rule) {\n  if (typeof rule.style === 'string') {\n    // $FlowFixMe: We can safely assume that rule has the style property\n    rule.style = parse(rule.style);\n  }\n};\n\nfunction templatePlugin() {\n  return {\n    onProcessRule: onProcessRule\n  };\n}\n\nexport default templatePlugin;","map":null,"metadata":{},"sourceType":"module"}