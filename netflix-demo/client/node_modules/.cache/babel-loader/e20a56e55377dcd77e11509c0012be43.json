{"ast":null,"code":"var _jsxFileName = \"/home/phson/Desktop/OOAD-netflix-clone/netflix-demo/client/src/components/Jawbone/JawboneContent.js\";\n\n/*import JawbonePlot from './JawbonePlot'\nimport JawboneTrailer from './JawboneTrailer'\n\nconst JawboneContent =({onCloseRequest,children}) => {\n  document.addEventListener('click')\n\n  const onClick = (event) => {\n\n  }\n\n  return (\n    <div class=\"jawbone-overlay\" onClick={onClick}>\n      <div class=\"jawbone-content\">\n        <JawboneTrailer/>\n        <JawbonePlot/>\n      </div>\n\n    </div>\n  )\n}\n\nexport default JawboneContent*/\nimport React, { Component } from 'react';\nimport injectSheet from 'react-jss';\nimport isNil from 'lodash/fp/isNil';\nimport styles from './JawboneContentStyle'; // Import styles\n// Declaration of the component as React Class Component\n\nclass JawboneContent extends Component {\n  // Init of the component before it is mounted.\n  constructor(props) {\n    super(props);\n    this.handleKeyUp = this.handleKeyUp.bind(this);\n    this.handleOutsideClick = this.handleOutsideClick.bind(this);\n  } // Add listeners immediately after the component is mounted.\n\n\n  componentDidMount() {\n    window.addEventListener('keyup', this.handleKeyUp, false);\n    document.addEventListener('click', this.handleOutsideClick, false);\n  } // Remove listeners immediately before a component is unmounted and destroyed.\n\n\n  componentWillUnmount() {\n    window.removeEventListener('keyup', this.handleKeyUp, false);\n    document.removeEventListener('click', this.handleOutsideClick, false);\n  } // Handle the key press event.\n\n\n  handleKeyUp(e) {\n    const onCloseRequest = this.props.onCloseRequest;\n    const keys = {\n      27: () => {\n        e.preventDefault();\n        onCloseRequest();\n        window.removeEventListener('keyup', this.handleKeyUp, false);\n      }\n    };\n\n    if (keys[e.keyCode]) {\n      keys[e.keyCode]();\n    }\n  } // Handle the mouse click on browser window.\n\n\n  handleOutsideClick(e) {\n    const onCloseRequest = this.props.onCloseRequest;\n\n    if (!isNil(this.modal)) {\n      if (!this.modal.contains(e.target)) {\n        onCloseRequest();\n        document.removeEventListener('click', this.handleOutsideClick, false);\n      }\n    }\n  } // Render the component passing onCloseRequest and children as props.\n\n\n  render() {\n    const _this$props = this.props,\n          onCloseRequest = _this$props.onCloseRequest,\n          children = _this$props.children,\n          classes = _this$props.classes;\n    return React.createElement(\"div\", {\n      className: classes.modalOverlay,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.modal,\n      ref: node => this.modal = node,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.modalContent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, children)));\n  }\n\n} // Export the component to use it in other components.\n\n\nexport default injectSheet(styles)(JawboneContent);","map":{"version":3,"sources":["/home/phson/Desktop/OOAD-netflix-clone/netflix-demo/client/src/components/Jawbone/JawboneContent.js"],"names":["React","Component","injectSheet","isNil","styles","JawboneContent","constructor","props","handleKeyUp","bind","handleOutsideClick","componentDidMount","window","addEventListener","document","componentWillUnmount","removeEventListener","e","onCloseRequest","keys","preventDefault","keyCode","modal","contains","target","render","children","classes","modalOverlay","node","modalContent"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,WAAxB;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,MAAP,MAAmB,uBAAnB,C,CAA4C;AAE5C;;AACA,MAAMC,cAAN,SAA6BJ,SAA7B,CAAuC;AAErC;AACAK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBD,IAAxB,CAA6B,IAA7B,CAA1B;AACD,GARoC,CAUrC;;;AACAE,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiC,KAAKL,WAAtC,EAAmD,KAAnD;AACAM,IAAAA,QAAQ,CAACD,gBAAT,CAA0B,OAA1B,EAAmC,KAAKH,kBAAxC,EAA4D,KAA5D;AACD,GAdoC,CAgBrC;;;AACAK,EAAAA,oBAAoB,GAAG;AACrBH,IAAAA,MAAM,CAACI,mBAAP,CAA2B,OAA3B,EAAoC,KAAKR,WAAzC,EAAsD,KAAtD;AACAM,IAAAA,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,EAAsC,KAAKN,kBAA3C,EAA+D,KAA/D;AACD,GApBoC,CAsBrC;;;AACAF,EAAAA,WAAW,CAACS,CAAD,EAAI;AAAA,UACLC,cADK,GACc,KAAKX,KADnB,CACLW,cADK;AAEb,UAAMC,IAAI,GAAG;AACX,UAAI,MAAM;AACRF,QAAAA,CAAC,CAACG,cAAF;AACAF,QAAAA,cAAc;AACdN,QAAAA,MAAM,CAACI,mBAAP,CAA2B,OAA3B,EAAoC,KAAKR,WAAzC,EAAsD,KAAtD;AACD;AALU,KAAb;;AAQA,QAAIW,IAAI,CAACF,CAAC,CAACI,OAAH,CAAR,EAAqB;AAAEF,MAAAA,IAAI,CAACF,CAAC,CAACI,OAAH,CAAJ;AAAoB;AAC5C,GAlCoC,CAoCrC;;;AACAX,EAAAA,kBAAkB,CAACO,CAAD,EAAI;AAAA,UACZC,cADY,GACO,KAAKX,KADZ,CACZW,cADY;;AAGpB,QAAI,CAACf,KAAK,CAAC,KAAKmB,KAAN,CAAV,EAAwB;AACtB,UAAI,CAAC,KAAKA,KAAL,CAAWC,QAAX,CAAoBN,CAAC,CAACO,MAAtB,CAAL,EAAoC;AAClCN,QAAAA,cAAc;AACdJ,QAAAA,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,EAAsC,KAAKN,kBAA3C,EAA+D,KAA/D;AACD;AACF;AACF,GA9CoC,CAgDrC;;;AACAe,EAAAA,MAAM,GAAI;AAAA,wBAKJ,KAAKlB,KALD;AAAA,UAENW,cAFM,eAENA,cAFM;AAAA,UAGNQ,QAHM,eAGNA,QAHM;AAAA,UAINC,OAJM,eAINA,OAJM;AAOR,WACE;AAAK,MAAA,SAAS,EAAEA,OAAO,CAACC,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,SAAS,EAAED,OAAO,CAACL,KADrB;AAEE,MAAA,GAAG,EAAEO,IAAI,IAAK,KAAKP,KAAL,GAAaO,IAF7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE;AAAK,MAAA,SAAS,EAAEF,OAAO,CAACG,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGJ,QADH,CAJF,CADF,CADF;AAaD;;AArEoC,C,CAwEvC;;;AACA,eAAexB,WAAW,CAACE,MAAD,CAAX,CAAoBC,cAApB,CAAf","sourcesContent":["/*import JawbonePlot from './JawbonePlot'\nimport JawboneTrailer from './JawboneTrailer'\n\nconst JawboneContent =({onCloseRequest,children}) => {\n  document.addEventListener('click')\n\n  const onClick = (event) => {\n\n  }\n\n  return (\n    <div class=\"jawbone-overlay\" onClick={onClick}>\n      <div class=\"jawbone-content\">\n        <JawboneTrailer/>\n        <JawbonePlot/>\n      </div>\n\n    </div>\n  )\n}\n\nexport default JawboneContent*/\n\nimport React, { Component } from 'react';\nimport injectSheet from 'react-jss';\nimport isNil from 'lodash/fp/isNil';\nimport styles from './JawboneContentStyle'; // Import styles\n\n// Declaration of the component as React Class Component\nclass JawboneContent extends Component {\n\n  // Init of the component before it is mounted.\n  constructor(props) {\n    super(props);\n\n    this.handleKeyUp = this.handleKeyUp.bind(this);\n    this.handleOutsideClick = this.handleOutsideClick.bind(this);\n  }\n\n  // Add listeners immediately after the component is mounted.\n  componentDidMount() {\n    window.addEventListener('keyup', this.handleKeyUp, false);\n    document.addEventListener('click', this.handleOutsideClick, false);\n  }\n\n  // Remove listeners immediately before a component is unmounted and destroyed.\n  componentWillUnmount() {\n    window.removeEventListener('keyup', this.handleKeyUp, false);\n    document.removeEventListener('click', this.handleOutsideClick, false);\n  }\n\n  // Handle the key press event.\n  handleKeyUp(e) {\n    const { onCloseRequest } = this.props;\n    const keys = {\n      27: () => {\n        e.preventDefault();\n        onCloseRequest();\n        window.removeEventListener('keyup', this.handleKeyUp, false);\n      },\n    };\n\n    if (keys[e.keyCode]) { keys[e.keyCode](); }\n  }\n\n  // Handle the mouse click on browser window.\n  handleOutsideClick(e) {\n    const { onCloseRequest } = this.props;\n\n    if (!isNil(this.modal)) {\n      if (!this.modal.contains(e.target)) {\n        onCloseRequest();\n        document.removeEventListener('click', this.handleOutsideClick, false);\n      }\n    }\n  }\n\n  // Render the component passing onCloseRequest and children as props.\n  render () {\n    const {\n      onCloseRequest,\n      children,\n      classes,\n    } = this.props;\n\n    return (\n      <div className={classes.modalOverlay}>\n        <div\n          className={classes.modal}\n          ref={node => (this.modal = node)}\n        >\n          <div className={classes.modalContent}>\n            {children}\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\n// Export the component to use it in other components.\nexport default injectSheet(styles)(JawboneContent);\n"]},"metadata":{},"sourceType":"module"}