{"ast":null,"code":"import _defineProperty from \"/home/phson/Fullstackopen-examples/part2/app-example/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/phson/Fullstackopen-examples/part2/app-example/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/phson/Fullstackopen-examples/part2/app-example/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport noteService from './services/notes';\n\nconst App = props => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        notes = _useState2[0],\n        setNotes = _useState2[1];\n\n  const _useState3 = useState('a new note...'),\n        _useState4 = _slicedToArray(_useState3, 2),\n        newNote = _useState4[0],\n        setNewNote = _useState4[1];\n\n  const _useState5 = useState(true),\n        _useState6 = _slicedToArray(_useState5, 2),\n        showAll = _useState6[0],\n        setShowAll = _useState6[1];\n\n  useEffect(() => {\n    noteService.getAll().then(initialNotes => {\n      setNotes(initialNotes);\n    });\n  }, []);\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\n\n  const handleNoteChange = event => {\n    setNewNote(event.target.value);\n  };\n\n  const toggleImportance = id => {\n    const note = notes.find(n => n.id === id);\n\n    const changedNote = _objectSpread({}, note, {\n      important: !note.important\n    });\n\n    noteService.update(id, changedNote).then(changedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : changedNote));\n    }).catch(error => {\n      console.log('failed to update');\n    });\n  };\n\n  const rows = () => notesToShow.map(note => React.createElement(Note, {\n    key: note.id,\n    note: note,\n    toggleImportance: () => toggleImportance(note.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }));\n\n  const addNote = event => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1\n    };\n    noteService.create(noteObject).then(newNote => {\n      setNotes(notes.concat(newNote));\n      setNewNote('');\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Notes\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: () => setShowAll(!showAll),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"show \", showAll ? 'important' : 'all')), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, rows()), React.createElement(\"form\", {\n    onSubmit: addNote,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    value: newNote,\n    onChange: handleNoteChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"save\")));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/phson/Fullstackopen-examples/part2/app-example/src/App.js"],"names":["React","useState","useEffect","Note","noteService","App","props","notes","setNotes","newNote","setNewNote","showAll","setShowAll","getAll","then","initialNotes","notesToShow","filter","note","important","handleNoteChange","event","target","value","toggleImportance","id","find","n","changedNote","update","map","catch","error","console","log","rows","addNote","preventDefault","noteObject","content","date","Date","toISOString","Math","random","length","create","concat"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState(\n    'a new note...'\n  )\n  const [showAll, setShowAll] = useState(true)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const toggleImportance = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = {...note, important: !note.important}\n\n    noteService\n      .update(id, changedNote)\n      .then(changedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : changedNote))\n      })\n      .catch(error => {\n        console.log('failed to update')\n      })\n  }\n\n  const rows = () => notesToShow.map(note =>\n    <\n    Note key={note.id}\n    note={note}\n    toggleImportance={() => toggleImportance(note.id)}\n    />\n  )\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n\n    noteService\n      .create(noteObject)\n      .then(newNote => {\n        setNotes(notes.concat(newNote))\n        setNewNote('')\n      })\n  }\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {rows()}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n        value={newNote}\n        onChange={handleNoteChange}/>\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}