{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport React, { Component } from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { ThemeContext } from 'theming';\nexport { ThemeProvider, withTheme, createTheming, useTheme } from 'theming';\nimport warning from 'tiny-warning';\nimport defaultJss, { SheetsManager, create, getDynamicStyles, createGenerateId, SheetsRegistry } from 'jss';\nexport { SheetsRegistry, createGenerateId } from 'jss';\nimport preset from 'jss-preset-default';\nimport isInBrowser from 'is-in-browser';\nimport PropTypes from 'prop-types';\nimport { shallowEqualObjects } from 'shallow-equal';\nimport isPropValid from '@emotion/is-prop-valid';\nimport defaultCss from 'css-jss';\n\nvar getDisplayName = function (Component$$1) {\n  return Component$$1.displayName || Component$$1.name || 'Component';\n};\n\nvar memoize = function memoize(fn) {\n  var lastArgs;\n  var lastResult;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (Array.isArray(lastArgs) && args.length === lastArgs.length) {\n      var isSame = true;\n\n      for (var i = 0; i < args.length; i++) {\n        if (args[i] !== lastArgs[i]) {\n          isSame = false;\n        }\n      }\n\n      if (isSame) {\n        return lastResult;\n      }\n    }\n\n    lastArgs = args;\n    lastResult = fn.apply(void 0, args);\n    return lastResult;\n  };\n};\n\nfunction mergeClasses(baseClasses, additionalClasses) {\n  var combinedClasses = _extends({}, baseClasses);\n\n  for (var name in additionalClasses) {\n    combinedClasses[name] = name in combinedClasses ? combinedClasses[name] + \" \" + additionalClasses[name] : additionalClasses[name];\n  }\n\n  return combinedClasses;\n}\n\nvar JssContext = React.createContext({\n  classNamePrefix: '',\n  disableStylesGeneration: false\n});\n/**\n * Global index counter to preserve source order.\n * As we create the style sheet during componentWillMount lifecycle,\n * children are handled after the parents, so the order of style elements would\n * be parent->child. It is a problem though when a parent passes a className\n * which needs to override any childs styles. StyleSheet of the child has a higher\n * specificity, because of the source order.\n * So our solution is to render sheets them in the reverse order child->sheet, so\n * that parent has a higher specificity.\n *\n * We start at [Number.MIN_SAFE_INTEGER] to always insert sheets from react-jss first before any\n * sheet which might be inserted manually by the user.\n */\n\nvar index = Number.MIN_SAFE_INTEGER || -1e9;\n\nvar getSheetIndex = function getSheetIndex() {\n  return index++;\n};\n\nvar defaultManagers = new Map();\n\nvar getManager = function getManager(context, managerId) {\n  // If `managers` map is present in the context, we use it in order to\n  // let JssProvider reset them when new response has to render server-side.\n  if (context.managers) {\n    if (!context.managers[managerId]) {\n      context.managers[managerId] = new SheetsManager();\n    }\n\n    return context.managers[managerId];\n  }\n\n  var manager = defaultManagers.get(managerId);\n\n  if (!manager) {\n    manager = new SheetsManager();\n    defaultManagers.set(managerId, manager);\n  }\n\n  return manager;\n};\n\nvar manageSheet = function manageSheet(options) {\n  var sheet = options.sheet,\n      context = options.context,\n      index = options.index,\n      theme = options.theme;\n\n  if (!sheet) {\n    return;\n  }\n\n  var manager = getManager(context, index);\n  manager.manage(theme);\n\n  if (context.registry) {\n    context.registry.add(sheet);\n  }\n};\n\nvar unmanageSheet = function unmanageSheet(options) {\n  if (!options.sheet) {\n    return;\n  }\n\n  var manager = getManager(options.context, options.index);\n  manager.unmanage(options.theme);\n};\n\nvar defaultJss$1 = create(preset());\nvar sheetsMeta = new WeakMap();\n\nvar getMeta = function getMeta(sheet) {\n  return sheetsMeta.get(sheet);\n};\n\nvar addMeta = function addMeta(sheet, meta) {\n  sheetsMeta.set(sheet, meta);\n};\n\nvar getStyles = function getStyles(options) {\n  var styles = options.styles;\n\n  if (typeof styles !== 'function') {\n    return styles;\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(styles.length !== 0, \"[JSS] <\" + (options.name || 'Hook') + \" />'s styles function doesn't rely on the \\\"theme\\\" argument. We recommend declaring styles as an object instead.\") : void 0;\n  return styles(options.theme);\n};\n\nfunction getSheetOptions(options, link) {\n  var minify;\n\n  if (options.context.id && options.context.id.minify != null) {\n    minify = options.context.id.minify;\n  }\n\n  var classNamePrefix = options.context.classNamePrefix || '';\n\n  if (options.name && !minify) {\n    classNamePrefix += options.name.replace(/\\s/g, '-') + \"-\";\n  }\n\n  var meta = '';\n  if (options.name) meta = options.name + \", \";\n  meta += typeof options.styles === 'function' ? 'Themed' : 'Unthemed';\n  return _extends({}, options.sheetOptions, {\n    index: options.index,\n    meta: meta,\n    classNamePrefix: classNamePrefix,\n    link: link,\n    generateId: options.context.generateId\n  });\n}\n\nvar createStyleSheet = function createStyleSheet(options) {\n  if (options.context.disableStylesGeneration) {\n    return undefined;\n  }\n\n  var manager = getManager(options.context, options.index);\n  var existingSheet = manager.get(options.theme);\n\n  if (existingSheet) {\n    return existingSheet;\n  }\n\n  var jss = options.context.jss || defaultJss$1;\n  var styles = getStyles(options);\n  var dynamicStyles = getDynamicStyles(styles);\n  var sheet = jss.createStyleSheet(styles, getSheetOptions(options, dynamicStyles !== null));\n  addMeta(sheet, {\n    dynamicStyles: dynamicStyles,\n    styles: styles,\n    dynamicRuleCounter: 0\n  });\n  manager.add(options.theme, sheet);\n  return sheet;\n};\n\nvar removeDynamicRules = function removeDynamicRules(sheet, rules) {\n  // Loop over each dynamic rule and remove the dynamic rule\n  // We can't just remove the whole sheet as this has all of the rules for every component instance\n  for (var key in rules) {\n    sheet.deleteRule(rules[key].key);\n  }\n};\n\nvar updateDynamicRules = function updateDynamicRules(data, sheet, rules) {\n  // Loop over each dynamic rule and update it\n  // We can't just update the whole sheet as this has all of the rules for every component instance\n  for (var key in rules) {\n    // $FlowFixMe\n    sheet.update(rules[key].key, data);\n  }\n};\n\nvar addDynamicRules = function addDynamicRules(sheet, data) {\n  var meta = getMeta(sheet);\n\n  if (!meta) {\n    return undefined;\n  }\n\n  var rules = {}; // Loop over each dynamic rule and add it to the stylesheet\n\n  for (var key in meta.dynamicStyles) {\n    var name = key + \"-\" + meta.dynamicRuleCounter++;\n    var initialRuleCount = sheet.rules.index.length;\n    var originalRule = sheet.addRule(name, meta.dynamicStyles[key]); // Loop through all created rules, fixes updating dynamic rules\n\n    for (var i = initialRuleCount; i < sheet.rules.index.length; i++) {\n      var rule = sheet.rules.index[i]; // $FlowFixMe: Not sure why flow has an issue here\n\n      sheet.update(rule.key, data); // If it's the original rule, we need to add it by the correct key so the hook and hoc\n      // can correctly concat the dynamic class with the static one\n\n      rules[originalRule === rule ? key : rule.key] = rule;\n    }\n  }\n\n  return rules;\n};\n\nvar getSheetClasses = function getSheetClasses(sheet, dynamicRules) {\n  if (!dynamicRules) {\n    return sheet.classes;\n  }\n\n  var classes = {};\n  var meta = getMeta(sheet);\n\n  if (!meta) {\n    return sheet.classes;\n  }\n\n  for (var key in meta.styles) {\n    classes[key] = sheet.classes[key];\n\n    if (key in dynamicRules) {\n      classes[key] += \" \" + sheet.classes[dynamicRules[key].key];\n    }\n  }\n\n  return classes;\n};\n\nvar NoRenderer = function NoRenderer(props) {\n  return props.children || null;\n};\n\nvar noTheme = {};\n/**\n * HOC creator function that wrapps the user component.\n *\n * `withStyles(styles, [options])(Component)`\n */\n\nvar withStyles = function withStyles(styles, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$index = _options.index,\n      index = _options$index === void 0 ? getSheetIndex() : _options$index,\n      theming = _options.theming,\n      injectTheme = _options.injectTheme,\n      sheetOptions = _objectWithoutPropertiesLoose(_options, [\"index\", \"theming\", \"injectTheme\"]);\n\n  var isThemingEnabled = typeof styles === 'function';\n  var ThemeConsumer = theming && theming.context.Consumer || ThemeContext.Consumer;\n  return function (InnerComponent) {\n    if (InnerComponent === void 0) {\n      InnerComponent = NoRenderer;\n    }\n\n    var displayName = getDisplayName(InnerComponent);\n\n    var getTheme = function getTheme(props) {\n      return isThemingEnabled ? props.theme : noTheme;\n    };\n\n    var WithStyles =\n    /*#__PURE__*/\n    function (_Component) {\n      _inheritsLoose(WithStyles, _Component); // $FlowFixMe\n\n\n      WithStyles.createState = function createState(props) {\n        var sheet = createStyleSheet({\n          styles: styles,\n          theme: getTheme(props),\n          index: index,\n          name: displayName,\n          context: props.jssContext,\n          sheetOptions: sheetOptions\n        });\n\n        if (!sheet) {\n          return {\n            classes: {},\n            dynamicRules: undefined,\n            sheet: undefined\n          };\n        }\n\n        var dynamicRules = addDynamicRules(sheet, props);\n        return {\n          sheet: sheet,\n          dynamicRules: dynamicRules,\n          classes: getSheetClasses(sheet, dynamicRules)\n        };\n      };\n\n      WithStyles.manage = function manage(props, state) {\n        var sheet = state.sheet;\n\n        if (sheet) {\n          manageSheet({\n            sheet: sheet,\n            index: index,\n            context: props.jssContext,\n            theme: getTheme(props)\n          });\n        }\n      };\n\n      WithStyles.unmanage = function unmanage(props, state) {\n        var sheet = state.sheet,\n            dynamicRules = state.dynamicRules;\n\n        if (sheet) {\n          unmanageSheet({\n            context: props.jssContext,\n            index: index,\n            sheet: sheet,\n            theme: getTheme(props)\n          });\n\n          if (dynamicRules) {\n            removeDynamicRules(sheet, dynamicRules);\n          }\n        }\n      };\n\n      function WithStyles(props) {\n        var _this;\n\n        _this = _Component.call(this, props) || this;\n        _this.mergeClassesProp = memoize(function (sheetClasses, classesProp) {\n          return classesProp ? mergeClasses(sheetClasses, classesProp) : sheetClasses;\n        });\n        _this.state = WithStyles.createState(props);\n        var registry = props.jssContext.registry;\n        var sheet = _this.state.sheet;\n\n        if (sheet && registry) {\n          registry.add(sheet);\n        }\n\n        return _this;\n      }\n\n      var _proto = WithStyles.prototype;\n\n      _proto.componentDidMount = function componentDidMount() {\n        var props = this.props,\n            state = this.state;\n\n        if (props && state) {\n          WithStyles.manage(props, state);\n        }\n      };\n\n      _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n        if (isThemingEnabled && this.props.theme !== prevProps.theme) {\n          var newState = WithStyles.createState(this.props);\n          WithStyles.manage(this.props, newState);\n          WithStyles.unmanage(prevProps, prevState); // eslint-disable-next-line react/no-did-update-set-state\n\n          this.setState(newState);\n        } else if (this.state.sheet && this.state.dynamicRules) {\n          // Only update the rules when we don't generate a new sheet\n          updateDynamicRules(this.props, this.state.sheet, this.state.dynamicRules);\n        }\n      };\n\n      _proto.componentWillUnmount = function componentWillUnmount() {\n        WithStyles.unmanage(this.props, this.state);\n      };\n\n      _proto.render = function render() {\n        var _this$props = this.props,\n            innerRef = _this$props.innerRef,\n            jssContext = _this$props.jssContext,\n            theme = _this$props.theme,\n            classes = _this$props.classes,\n            rest = _objectWithoutPropertiesLoose(_this$props, [\"innerRef\", \"jssContext\", \"theme\", \"classes\"]);\n\n        var sheetClasses = this.state.classes;\n\n        var props = _extends({}, rest, {\n          classes: this.mergeClassesProp(sheetClasses, classes)\n        });\n\n        if (innerRef) props.ref = innerRef;\n        if (injectTheme) props.theme = theme;\n        return React.createElement(InnerComponent, props);\n      };\n\n      return WithStyles;\n    }(Component);\n\n    WithStyles.displayName = \"WithStyles(\" + displayName + \")\";\n    WithStyles.defaultProps = _extends({}, InnerComponent.defaultProps);\n    var JssContextSubscriber = React.forwardRef(function (props, ref) {\n      return React.createElement(JssContext.Consumer, null, function (context) {\n        if (isThemingEnabled || injectTheme) {\n          return React.createElement(ThemeConsumer, null, function (theme) {\n            return React.createElement(WithStyles, _extends({\n              innerRef: ref,\n              theme: theme\n            }, props, {\n              jssContext: context\n            }));\n          });\n        }\n\n        return React.createElement(WithStyles, _extends({\n          innerRef: ref\n        }, props, {\n          jssContext: context,\n          theme: noTheme\n        }));\n      });\n    });\n    JssContextSubscriber.displayName = 'JssContextSubscriber'; // $FlowFixMe - React's types should allow custom static properties on component.\n\n    JssContextSubscriber.InnerComponent = InnerComponent;\n    return hoistNonReactStatics(JssContextSubscriber, InnerComponent);\n  };\n};\n\nvar useEffectOrLayoutEffect = isInBrowser ? React.useLayoutEffect : React.useEffect;\nvar noTheme$1 = {};\n\nvar reducer = function reducer(prevState, action) {\n  if (action.type === 'updateSheet') {\n    return action.payload;\n  }\n\n  return prevState;\n};\n\nvar createUseStyles = function createUseStyles(styles, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$index = _options.index,\n      index = _options$index === void 0 ? getSheetIndex() : _options$index,\n      theming = _options.theming,\n      name = _options.name,\n      sheetOptions = _objectWithoutPropertiesLoose(_options, [\"index\", \"theming\", \"name\"]);\n\n  var ThemeContext$$1 = theming && theming.context || ThemeContext;\n  var useTheme = typeof styles === 'function' ? // $FlowFixMe\n  function () {\n    return React.useContext(ThemeContext$$1) || noTheme$1;\n  } : // $FlowFixMe\n  function () {\n    return noTheme$1;\n  };\n  return function useStyles(data) {\n    var isFirstMount = React.useRef(true);\n    var context = React.useContext(JssContext);\n    var theme = useTheme();\n\n    var _React$useReducer = React.useReducer(reducer, null, function () {\n      var sheet = createStyleSheet({\n        context: context,\n        styles: styles,\n        name: name,\n        theme: theme,\n        index: index,\n        sheetOptions: sheetOptions\n      });\n      var dynamicRules;\n      var classes;\n\n      if (sheet) {\n        if (context.registry) {\n          context.registry.add(sheet);\n        }\n\n        dynamicRules = addDynamicRules(sheet, data);\n        classes = getSheetClasses(sheet, dynamicRules);\n      }\n\n      return {\n        sheet: sheet,\n        dynamicRules: dynamicRules,\n        classes: classes || {}\n      };\n    }),\n        state = _React$useReducer[0],\n        dispatch = _React$useReducer[1];\n\n    useEffectOrLayoutEffect(function () {\n      if (state.sheet) {\n        manageSheet({\n          index: index,\n          context: context,\n          sheet: state.sheet,\n          theme: theme\n        });\n      }\n\n      return function () {\n        var sheet = state.sheet,\n            dynamicRules = state.dynamicRules;\n        if (!sheet) return;\n        unmanageSheet({\n          index: index,\n          context: context,\n          sheet: sheet,\n          theme: theme\n        });\n\n        if (dynamicRules) {\n          removeDynamicRules(sheet, dynamicRules);\n        }\n      };\n    }, [state.sheet]);\n    useEffectOrLayoutEffect(function () {\n      // We only need to update the rules on a subsequent update and not in the first mount\n      if (state.sheet && state.dynamicRules && !isFirstMount.current) {\n        updateDynamicRules(data, state.sheet, state.dynamicRules);\n      }\n    }, [data]);\n    useEffectOrLayoutEffect(function () {\n      if (!isFirstMount.current) {\n        var newSheet = createStyleSheet({\n          context: context,\n          styles: styles,\n          name: name,\n          theme: theme,\n          index: index,\n          sheetOptions: sheetOptions\n        });\n        var newDynamicRules = newSheet && addDynamicRules(newSheet, data);\n        var newClasses = newSheet ? getSheetClasses(newSheet, newDynamicRules) : {};\n        dispatch({\n          type: 'updateSheet',\n          payload: {\n            sheet: newSheet,\n            dynamicRules: newDynamicRules,\n            classes: newClasses\n          }\n        });\n      }\n    }, [theme, context]); // $FlowFixMe\n\n    React.useDebugValue(state.classes); // $FlowFixMe\n\n    React.useDebugValue(theme === noTheme$1 ? 'No theme' : theme);\n    React.useEffect(function () {\n      isFirstMount.current = false;\n    });\n    return state.classes;\n  };\n};\n\nvar initialContext = {};\n\nvar JssProvider =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(JssProvider, _Component);\n\n  function JssProvider() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n    _this.managers = {};\n\n    _this.createContext = function (parentContext, prevContext) {\n      if (prevContext === void 0) {\n        prevContext = initialContext;\n      }\n\n      var _this$props = _this.props,\n          registry = _this$props.registry,\n          classNamePrefix = _this$props.classNamePrefix,\n          jss = _this$props.jss,\n          generateId = _this$props.generateId,\n          disableStylesGeneration = _this$props.disableStylesGeneration,\n          media = _this$props.media,\n          id = _this$props.id;\n\n      var context = _extends({}, parentContext);\n\n      if (registry) {\n        context.registry = registry; // This way we identify a new request on the server, because user will create\n        // a new Registry instance for each.\n\n        if (registry !== _this.registry) {\n          // We reset managers because we have to regenerate all sheets for the new request.\n          _this.managers = {};\n          _this.registry = registry;\n        }\n      }\n\n      context.managers = _this.managers;\n\n      if (id !== undefined) {\n        context.id = id;\n      }\n\n      if (generateId !== undefined) {\n        context.generateId = generateId;\n      }\n\n      if (!context.generateId || !prevContext || context.id !== prevContext.id) {\n        context.generateId = createGenerateId(context.id);\n      }\n\n      if (classNamePrefix) {\n        context.classNamePrefix += classNamePrefix;\n      }\n\n      if (media !== undefined) {\n        context.media = media;\n      }\n\n      if (jss) {\n        context.jss = jss;\n      }\n\n      if (disableStylesGeneration !== undefined) {\n        context.disableStylesGeneration = disableStylesGeneration;\n      }\n\n      if (prevContext && shallowEqualObjects(prevContext, context)) {\n        return prevContext;\n      }\n\n      return context;\n    };\n\n    _this.prevContext = void 0;\n    _this.generateId = void 0;\n    _this.registry = void 0;\n\n    _this.renderProvider = function (parentContext) {\n      var children = _this.props.children;\n\n      var context = _this.createContext(parentContext, _this.prevContext);\n\n      _this.prevContext = context;\n      return React.createElement(JssContext.Provider, {\n        value: context\n      }, children);\n    };\n\n    return _this;\n  }\n\n  var _proto = JssProvider.prototype;\n\n  _proto.render = function render() {\n    return React.createElement(JssContext.Consumer, null, this.renderProvider);\n  };\n\n  return JssProvider;\n}(Component);\n\nJssProvider.propTypes = {\n  registry: PropTypes.instanceOf(SheetsRegistry),\n  jss: PropTypes.instanceOf(defaultJss.constructor),\n  generateId: PropTypes.func,\n  classNamePrefix: PropTypes.string,\n  disableStylesGeneration: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n  media: PropTypes.string,\n  id: PropTypes.shape({\n    minify: PropTypes.bool\n  })\n};\n/* eslint-disable react/prop-types, react/require-default-props */\n\nvar parseStyles = function parseStyles(args) {\n  var dynamicStyles = [];\n  var staticStyle;\n  var labels = []; // Not using ...rest to optimize perf.\n\n  for (var key in args) {\n    var style = args[key];\n    if (!style) continue;\n\n    if (typeof style === 'function') {\n      dynamicStyles.push(style);\n    } else {\n      if (!staticStyle) staticStyle = {};\n      Object.assign(staticStyle, style);\n\n      if (staticStyle.label) {\n        if (labels.indexOf(staticStyle.label) === -1) labels.push(staticStyle.label);\n      }\n    }\n  }\n\n  var styles = {};\n  var label = labels.length === 0 ? 'sc' : labels.join('-');\n\n  if (staticStyle) {\n    // Label should not leak to the core.\n    if ('label' in staticStyle) delete staticStyle.label;\n    styles[label] = staticStyle;\n  } // When there is only one function rule, we don't need to wrap it.\n\n\n  if (dynamicStyles.length === 1) {\n    styles.scd = dynamicStyles[0];\n  } // We create a new function rule which will call all other function rules\n  // and merge the styles they return.\n\n\n  if (dynamicStyles.length > 1) {\n    styles.scd = function (props) {\n      var merged = {};\n\n      for (var i = 0; i < dynamicStyles.length; i++) {\n        var dynamicStyle = dynamicStyles[i](props);\n        if (dynamicStyle) Object.assign(merged, dynamicStyle);\n      }\n\n      return merged;\n    };\n  }\n\n  return {\n    styles: styles,\n    label: label\n  };\n};\n\nvar shouldForwardPropSymbol = Symbol('react-jss-styled');\n\nvar getShouldForwardProp = function getShouldForwardProp(tagOrComponent, options) {\n  var shouldForwardProp = options.shouldForwardProp; // $FlowIgnore that prop shouldn't be there.\n\n  var childShouldForwardProp = tagOrComponent[shouldForwardPropSymbol];\n  var finalShouldForwardProp = shouldForwardProp || childShouldForwardProp;\n\n  if (shouldForwardProp && childShouldForwardProp) {\n    finalShouldForwardProp = function finalShouldForwardProp(prop) {\n      return childShouldForwardProp(prop) && shouldForwardProp(prop);\n    };\n  }\n\n  return finalShouldForwardProp;\n};\n\nvar getChildProps = function getChildProps(props, shouldForwardProp, isTag) {\n  var childProps = {};\n\n  for (var prop in props) {\n    if (shouldForwardProp) {\n      if (shouldForwardProp(prop) === true) {\n        childProps[prop] = props[prop];\n      }\n\n      continue;\n    } // We don't want to pass non-dom props to the DOM.\n\n\n    if (isTag) {\n      if (isPropValid(prop)) {\n        childProps[prop] = props[prop];\n      }\n\n      continue;\n    }\n\n    childProps[prop] = props[prop];\n  }\n\n  return childProps;\n};\n\nvar configureStyled = function configureStyled(tagOrComponent, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      theming = _options.theming;\n  var isTag = typeof tagOrComponent === 'string';\n  var ThemeContext$$1 = theming ? theming.context : ThemeContext;\n  var shouldForwardProp = getShouldForwardProp(tagOrComponent, options);\n  return function createStyledComponent() {\n    // eslint-disable-next-line prefer-rest-params\n    var _parseStyles = parseStyles(arguments),\n        styles = _parseStyles.styles,\n        label = _parseStyles.label;\n\n    var useStyles = createUseStyles(styles, options);\n\n    var Styled = function Styled(props) {\n      var as = props.as,\n          className = props.className; // $FlowFixMe theming ThemeContext types need to be fixed.\n\n      var theme = React.useContext(ThemeContext$$1);\n      var propsWithTheme = Object.assign({\n        theme: theme\n      }, props);\n      var classes = useStyles(propsWithTheme);\n      var childProps = getChildProps(props, shouldForwardProp, isTag); // $FlowIgnore we don't care label might not exist in classes.\n\n      var classNames = ((classes[label] || classes.sc || '') + \" \" + (classes.scd || '')).trim();\n      childProps.className = className ? className + \" \" + classNames : classNames;\n\n      if (!isTag && shouldForwardProp) {\n        // $FlowIgnore we are not supposed to attach random properties to component functions.\n        tagOrComponent[shouldForwardPropSymbol] = shouldForwardProp;\n      }\n\n      if (isTag && as) {\n        return React.createElement(as, childProps);\n      }\n\n      return React.createElement(tagOrComponent, childProps);\n    };\n\n    return Styled;\n  };\n};\n/* eslint-disable prefer-rest-params, prefer-spread */\n\n\nvar create$1 = function create$$1(css) {\n  if (css === void 0) {\n    css = defaultCss;\n  }\n\n  return (// $FlowIgnore we don't care about the types here, since this is going to be called by the build tool.\n    function createElement(type, props) {\n      var args = arguments;\n\n      if (props && props.css) {\n        var className = css(props.css);\n        var newProps = Object.assign({}, props);\n        newProps.className = props.className ? props.className + \" \" + className : className;\n        delete newProps.css;\n        args[1] = newProps;\n      } // $FlowIgnore\n\n\n      return React.createElement.apply(undefined, args);\n    }\n  );\n};\n\nvar jsx = create$1();\nexport default withStyles;\nexport { withStyles, createUseStyles, JssProvider, defaultJss$1 as jss, JssContext, configureStyled as styled, jsx, create$1 as createJsx };","map":null,"metadata":{},"sourceType":"module"}